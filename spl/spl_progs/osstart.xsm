load (7,1); //The exception handler
load (8,2); //from 1,2 blocks to pages 7,8

load (23,17); // The interrupt 7 routine
load (24,18); // from 17,18 blocks to pages 23,24

[READY_LIST	+ 0*32] = 0; // Finding PCB from ready list and assigninf PID

load (25,21);
load (26,22); //load init from (21,22,23) blocks
load (27,23); // to (25,26,27) pages

PTBR = PAGE_TABLE + 0*8; //setting PTBR to correct location onm page table
PTLR = 4; // each process 4 pages

[PTBR + 0] = 25;   //Setting the Page Tabele Entry For The proces
[PTBR + 1] = "01"; // ->"" So that '0' is not truncated
[PTBR + 2] = 26;
[PTBR + 3] = "01";  // reference bit-> 0
[PTBR + 4] = 27;	// valid/invalid bit-> 1
[PTBR + 5] = "01";	// For each entry in table
[PTBR + 6] = 28; 
[PTBR + 7] = "01";	// page 28 -> STACK

[READY_LIST + 0*32 + 1] = 2; //Setting Process State (in 2nd bit in PCB) as 2 (Running)

breakpoint;
SP = 3 * 512; 	// This is the Logical Address (as is used in USER MODE after IRET)
				// Physical  == [(3* 512) / 512 ] -> 28 (from page table above (PTBR + 2*3))

[28 * 512] =0; 	// Physical location of stack is used to set value for SP in our process
				// so that IRET will change to USER MODE and then stack is popped
				// then logical 0 is loaded to IP ,after logical translation of SP.
breakpoint;
ireturn;