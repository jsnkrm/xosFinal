alias currentPID S0; 
alias currentPCB S1;
alias count S2;
alias newPCB S3;
alias physicalSP S4; 
alias newPhysicalSP S5;
alias j S6;
alias pageNum S7;
alias i S8;

physicalSP = ([PTBR + 2*(SP /512)] * 512) + (SP % 512); 
currentPID = (PTBR - 1024) / 8; 
currentPCB = READY_LIST + currentPID * 32; 


[currentPCB + 1] =1; 
[currentPCB + 2] = BP;
[currentPCB + 3] = SP-1;

[currentPCB + 4] = [physicalSP]; 
[currentPCB + 5] = PTBR;
[currentPCB + 6] = PTLR;

[currentPCB + 7] = R0;
[currentPCB + 8] = R1;
[currentPCB + 9] = R2;
[currentPCB + 10] = R3;
[currentPCB + 11] = R4;	
[currentPCB + 12] = R5;
[currentPCB + 13] = R6;
[currentPCB + 14] = R7;

j = PTBR;
pageNum = [PTBR + 6];

count = 1;
while (count <= 32) do 
	if( [READY_LIST + ((currentPID + count) % 32) * 32 + 1 ] == 1) then
		newPCB = (READY_LIST + ((currentPID + count) % 32) * 32);
		break;
	endif;
	count = count + 1;
endwhile; 

BP = [newPCB + 2];	 
SP = [newPCB + 3]; 
PTBR = [newPCB + 5];
PTLR = [newPCB + 6];

R0 = [newPCB + 7];
R1 = [newPCB + 8];
R2 = [newPCB + 9];
R3 = [newPCB + 10];
R4 = [newPCB + 11];
R5 = [newPCB + 12];
R6 = [newPCB + 13];
R7 = [newPCB + 14];

if([PTBR + 6] >= 448) then
	load(1,[PTBR + 6]);
	store(pageNum,[PTBR + 6]);
	i = 0;
	while(i < 512) do
		[pageNum*512 + i] = [512 + i];
		i = i + 1;
	endwhile;
	[j + 6] = [PTBR + 6];
	[j + 7] = "00";
	[PTBR + 6] = pageNum;
	[MEM_LIST + pageNum] = 1;
	[PTBR + 7] = "11";
	store(6,20);
endif;		

SP = SP +1; 

newPhysicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);
[newPhysicalSP] = [newPCB + 4];

[newPCB + 1] = 2; 

ireturn;